import ipywidgets as widgets
import time
import pandas as pd
import os

<<<<<<< HEAD
=======

>>>>>>> 2d2e0bf1af0e288000203699b57d124791c003e9
from datetime import datetime






def output(outputtext,outputobj=""):
    if isinstance(outputobj, widgets.widgets.widget_output.Output):
        outputobj.append_stdout(outputtext+"\n")
    else:
        print(outputtext+"\n")

def get_slider_date(outputtext,outputobj=""):
    if isinstance(outputobj, widgets.daterange_Slider.value[0]):
        outputobj.append_stdout(outputtext+"\n")

@debug_view.capture(clear_output=True)
def georef_trigger(event):
    global georef_select
    global georef_out
    global daterange_Slider 
    
    datetuple1 = daterange_Slider.value[0].date().isoformat()
    datetuple2 = daterange_Slider.value[1].date().isoformat()
    date1=datetuple1.replace("-","")
    date2=datetuple2.replace("-","")
    dateint1 = int(''.join(str(e) for e in date1))
    dateint2 = int(''.join(str(e) for e in date2))
    dates = [dateint1,dateint2]
    sel_values = georef_select.value
    output("Starte Georeferenz f√ºr {}\n".format(",".join(sel_values)),georef_out)
    merge_data(sel_values,dates,georef_out)
    

    
def georefUI():
    
    global place01_text
    global place02_text
    global georef_select
    global georef_out
    global place03_button
    global output
    
    global date_text
    global daterange_Slider
    global person_text
    
    
    tab_titles = ['IP-Adresse','Directory Traversal']
    tab_contents = ['P0', 'P1']
    children = []

    place01_text = widgets.Text(value='',
                  placeholder='place01',
                  description='String:',
                  disabled=False)
    place02_text = widgets.Text(value='',
                  placeholder='place02',
                  description='String:',
                  disabled=False)
    
    
    place03_button = widgets.Button(value=False,
                                   description='place03',
                                   disabled=False,
                                   button_style='success',
                                   tooltip='Description',
                                   icon='check')
    
    place04_button = widgets.Button(value=False,
                                   description='place04',
                                   disabled=False,
                                   button_style='success',
                                   tooltip='Description',
                                   icon='check')
    place05_button = widgets.Button(value=False,
                                   description='place05',
                                   disabled=False,
                                   button_style='success',
                                   tooltip='Description',
                                   icon='check')
    
    place06_select = widgets.SelectMultiple(options=['ip4','ip6'],
                                             value=['ip4','ip6'],
                                             description='List-Select:',
                                             disabled=False)

    
    place07_select = widgets.SelectMultiple(options=[''],
                                             value=[''],
                                             description='Datatype:',
                                             disabled=False)
   
    place08_select = widgets.SelectMultiple(options=[''],
                                             value=[''],
                                             description='Database:',
                                             disabled=False)
    

    place09_button = widgets.Button(value=False,
                                   description='Start',
                                   disabled=False,
                                   button_style='success',
                                   tooltip='Description',
                                   icon='check')
    
    place10_checkbox = widgets.Checkbox (value=False,
                                                description='place10',
                                                disabled=False)

    
    place11_progress = widgets.IntProgress(value= 1,
                                            min=1,
                                            max=11,
                                            step=1,
                                            description='Working',
                                            bar_style='',
                                            orientation='horizontal')
    
    
    lsdir_raw = os.listdir('data/')
    lsdir1 = [s for s in lsdir_raw if "cdr_" in s]
    lsdir = [s for s in lsdir1 if "merged" not in s]
    start_date= datetime((int(lsdir[1][4:8])),(int(lsdir[1][8:10])),(int(lsdir[1][10:12])))
    end_date= datetime((int(lsdir[-1][4:8])),(int(lsdir[-1][8:10])),(int(lsdir[-1][10:12])))
    #start_date_int= ((lsdir[1][4:8])),(int(lsdir[1][8:10])),(int(lsdir[1][10:12])))

 ## Created Date-Range-Slider to make the scanned dates adjustable 
    dates = pd.date_range(start_date,end_date,freq='D')
    options = [(date.strftime(' %d %b %Y'),date) for date in dates]
    index = (0,len(options)-1)
    daterange_Slider = widgets.SelectionRangeSlider(
                        options=options,
                        index=index,
                        description='Dates',
                        orientation='horizontal',
                        layout={'width': '500px'}
                        )

    
    output=widgets.Output(layout={'border':'1px solid black'})
    
    start_date=daterange_Slider.value[0]
    end_date =daterange_Slider.value[1]




    place03_button.on_click(georef_trigger)
    place05_button.on_click(other_trigger)
    
    
    
    children.append(widgets.VBox([place01_text, place02_text, place10_checkbox, place04_button,output,daterange_Slider]))
    children.append(widgets.VBox([georef_select,georef_button,georef_out,daterange_Slider]))
    children.append(widgets.VBox([place06_select,place09_button,output]))
    
    tab = widgets.Tab()
    tab.children = children
    for index,title in enumerate(tab_titles):
        tab.set_title(index,title)

    return tab
