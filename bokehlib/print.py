import bokehlib.prepare as prep
import bokehlib.rowplotter as rowp
import bokehlib.plots_misc as pltmisc
import bokehlib.helper as h

from bokeh.plotting import figure, show, output_file
from bokeh.models import WMTSTileSource, ColumnDataSource, HoverTool, PointDrawTool, LabelSet, Label, ColorBar, LinearColorMapper, ArrowHead, Arrow, VeeHead
from bokeh.io import output_notebook, push_notebook, show, output_file, export_png, export_svgs
from bokeh.resources import Resources
from bokeh import palettes
from scipy.interpolate import interp1d
import time

BOKEH_RESOURCES = "inline"
tiles = {'OpenMap':WMTSTileSource(url='http://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png ')}
#res = Resources(mode='server', root_url='http://1.2.3.4/res/')
#res.css_files

#output_notebook(resources=res)
output_notebook()

def find_merc_min_max(active_date_df):
    
    active_date_df['Longitude'] = active_date_df['Longitude'].astype(float)
    active_date_df['Latitude'] = active_date_df['Latitude'].astype(float)

    
    merc_min = rowp.convert_coords((active_date_df['Longitude'].min()-0.01, active_date_df['Latitude'].min()-0.01))
    merc_max = rowp.convert_coords((active_date_df['Longitude'].max()+0.01, active_date_df['Latitude'].max()+0.01))

    return (merc_min, merc_max)


def prepare_plot(df, title="Title",plot_width=1200, plot_height=1200):
    
    merc_min, merc_max = find_merc_min_max(df)
    
    p = figure (x_range=(merc_min[0], merc_max[0]),
                y_range=(merc_min[1], merc_max[1]),
                x_axis_type='mercator',
                y_axis_type='mercator',
                plot_width=plot_width,
                plot_height=plot_height,
                title=title)
    
    p.title.text_font_size = '30pt'
    
    return (merc_min, merc_max, p)


def print_points(df , title="Title", export=False, showplot=True):

    
    merc_min, merc_max, p = prepare_plot(df, title)
        
        
    _ = df.apply(rowp.plot_points,args=(p,),axis=1)    
    
    p.add_tile(tiles['OpenMap'])
    
    if showplot:
        show(p)
    else:
        return p
        
def print_points_heatmap(df, title="Title", export=False, showplot=True):
    
    
    merc_min, merc_max, p = prepare_plot(df, title)
    
    kc = []
    print(df.Longitude.value_counts())
    df['count'] = df.apply(h.count_multi_points, args=(kc, df,), axis=1)
    print(df['count'].value_counts())

    extra_m = interp1d([0,len(df)],[0,255],fill_value='extrapolate')
    
    _ = df.apply(rowp.plot_points_heatmap, args=(p, extra_m,), axis=1)
    
    p.add_tile(tiles['OpenMap'])
    
    color_mapper = LinearColorMapper(palette="Inferno256", low=0, high=len(df))
    color_bar = ColorBar(color_mapper=color_mapper,
                     label_standoff=12, 
                     border_line_color=None, 
                     location=(0,0))
    
    p.add_layout(color_bar, 'right')
    
    if showplot:
        show(p)
    else:
        return p
    
def print_points_heatmap_interactive(df, title="Title", export=False, showplot=True):
    
     
    merc_min, merc_max, p = prepare_plot(df, title)
    
    kc = []
    df['count'] = df.apply(h.count_multi_points_ip, args=(kc, df,), axis=1)
    #plot_df = 

    
    
    source = ColumnDataSource(data=dict(
    x=[1, 2, 3, 4, 5],
    y=[2, 5, 8, 2, 7],
    desc=['A', 'b', 'C', 'd', 'E'],
))

TOOLTIPS = [
    ("index", "$index"),
    ("(x,y)", "($x, $y)"),
    ("desc", "@desc"),
]

def print_movement(directory="", df="", title="Title", export=False):

    data_df = prep.create_dataframe(directory)
    active_date_df = data_df.sort_values(by='START_TIME')
    colors,colormap = rowp.create_colormap(active_date_df,column='START_TIME',typ="cont")

    active_date_df = active_date_df.reset_index()
    active_date_df.drop(columns=['index'],inplace=True)

    if export:
        plot_width = 4000
        plot_height = 4000
    else:
        plot_width = 1200
        plot_height = 1200
    
    merc_min = rowp.convert_coords((active_date_df['Longitude'].min()-0.01, active_date_df['Latitude'].min()-0.01))
    merc_max = rowp.convert_coords((active_date_df['Longitude'].max()+0.01, active_date_df['Latitude'].max()+0.01))


    p = figure (x_range=(merc_min[0], merc_max[0]),
                y_range=(merc_min[1], merc_max[1]),
                x_axis_type='mercator',
                y_axis_type='mercator',
                plot_width=plot_width,
                plot_height=plot_height,
                 title="title")
    p.title.text_font_size = '30pt'
    
    _ = active_date_df.apply(rowp.plot_points_time, args=(p,active_date_df,colors),axis=1)

    pltmisc.add_grid(p)
    '''
    arrow = Arrow(end=VeeHead(size=40),
                              y_start=co.merc_y(12.64),
                              y_end=co.merc_y(12.64),
                              x_start=co.merc_x(-7.948),
                              x_end=co.merc_x(-7.930),
                              line_width=30)
    p.add_layout(arrow)

    label = Label(x=co.merc_x(-7.938), y=co.merc_y(12.641), text="Ma√üstab 2km", text_font_size="30pt")
    p.add_layout(label)
    '''

    p.add_tile(tiles['OpenMap'])

    p.legend.glyph_height = 50
    p.legend.glyph_width = 50
    p.legend.label_text_font_size = "20pt"

    if export:
        show(p)
        time.sleep(10)
        export_png(p, title+".png")
    else:
        show(p)
