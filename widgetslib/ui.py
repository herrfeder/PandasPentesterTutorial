import ipywidgets as widgets
from ipywidgets import Layout, GridBox
import time
import pandas as pd
import os
from datetime import datetime
import markdown
import glob
from ipyiframe import Iframe

md = markdown.Markdown()


debug_output = widgets.Output(layout=Layout(width='auto', grid_area='footer', border='solid 2px'))
debug_output.append_stdout("ERROR AREA")


def output(outputtext,outputobj=""):
    if isinstance(outputobj, widgets.widgets.widget_output.Output):
        outputobj.append_stdout(outputtext+"\n")
    else:
        print(outputtext+"\n")

        
@debug_output.capture(clear_output=True)
def create_accordion(result=""):
    
    if not result:
        results = {"Webserver":"### Test\n  * hello","SSH":"### blubb\n  * hello"}
    
    accordion_children = []
    accordion_titles = []
    
    for title, value in results.items():

        accordion_children.append(widgets.HTML(value=md.convert(value)))
        accordion_titles.append(title)

    accordion = widgets.Accordion(children=accordion_children,layout=Layout(width='auto', grid_area='sidebar'))
    [accordion.set_title(index, single_title) for index, single_title in enumerate(accordion_titles)] 
        
    return accordion
        
        
@debug_output.capture(clear_output=True)
def host_do(event, ip_out, text01, text02):
   
    
    sel_values = text01.value
    output("Portscan: {}\n".format(",".join(sel_values)),ip_out)


@debug_output.capture(clear_output=True)
def create_control_tab(children, titles):
    
    tab_titles = titles
    tab = widgets.Tab(layout=Layout(width='auto', grid_area='firstmain'))
    tab.children = children
    for index,title in enumerate(tab_titles):
        tab.set_title(index,title)

    return tab


@debug_output.capture(clear_output=True)
def create_visuals_tab(children, titles):
    
    tab_titles = titles
    tab = widgets.Tab(layout=Layout(width='auto', grid_area='secondmain'))
    tab.children = children
    for index,title in enumerate(tab_titles):
        tab.set_title(index,title)

    return tab

def get_ip_list():
    return [1,2,3]

def get_domain_list():
    return ['a','b','c']


def erroroutput(clear_output=True):
    
    return debug_output

def get_graph_file():
    graph_files = glob.glob("figure/graph*")
    with open(graph_files[0],"r") as f:
        html = f.read()
    return html
    
@debug_output.capture(clear_output=True)
def create_visual_children():
    
    children = []
    children.append(create_iframe_widget(""))
    children.append(widgets.HTML(value = "<h5>blah</h5>"))
    
    return children

@debug_output.capture(clear_output=True)
def create_iframe_widget(filename):
    f = Iframe(
    # url - default to None
    # content - default to None
    # exactly one of src and srcdoc can be passed
    src="http://192.168.178.105:8888/myjupyt3r/files/work/PandasPentesterTutorial/figure/graph-4e2fc29d-064c-4887-b0f9-68ddb654b4d7.html",
    # width in CSS px - from the content page
    width=1800,
    # height in CSS px - from the content page
    height=1000,
    border='0',
        # CSS for iframe border attr
    # CSS for iframe margin attr
    #margin='',
    # CSS for iframe padding attr
    padding='1px',
    # iframe scrolling attr
    scrolling='no',
    # scaling factor - default to 1.0
    scale=0.6,
    # transform-origin param - default to 'top left'
    transform_origin='top left')

    return f
    
    
@debug_output.capture(clear_output=True)    
def georefUI():
    
   
    host_text01 = widgets.Text(value='',
                  placeholder='1.2.3.4',
                  description='IP-Adresse',
                  disabled=False)
    
    host_drop01 = widgets.Dropdown(
                  options=[el for el in get_ip_list()],
                  value=2,
                  description='',
                  disabled=False)

    
    host_text02 = widgets.Text(value='',
                  placeholder='victim.enterprise.com',
                  description='Domain',
                  disabled=False)
    
    host_drop02 = widgets.Dropdown(
                  options=[el for el in get_domain_list()],
                  value='a',
                  description='',
                  disabled=False)  
    
    host_button = widgets.Button(value=False,
                                   description='Find Portscan',
                                   disabled=False,
                                   button_style='success',
                                   tooltip='Description',
                                   icon='check')
    
    host_out=widgets.Output(layout={'border':'1px solid black'})
    
    stat_out=widgets.HTML(layout={'border':'1px solid black'})
    
    children = []
    children.append(widgets.VBox([widgets.HBox([host_text01, host_drop01]), 
                                 widgets.HBox([host_text02, host_drop02]), 
                                 widgets.HBox([host_button, host_out])]))
    
    children.append(widgets.VBox([stat_out]))
    
    tab_titles = ["Find Host", "Statistics"]
    
    control_tab = create_control_tab(children, tab_titles)
    
    tab_titles = ["Location", "Network View"]

    visual_children = create_visual_children()
    
    visuals_tab = create_visuals_tab(visual_children, tab_titles)
    accordion = create_accordion()

    
    
    @debug_output.capture(clear_output=True)
    def host_trigger(event):
        host_do(event, host_out, host_text01, host_text02, host_drop01, host_drop02)

    host_button.on_click(host_trigger)
        
    
   
        
    gridbox = GridBox(children=[control_tab, debug_output, accordion, visuals_tab],
            layout=Layout(
                    width='100%',
                    grid_template_rows='auto auto auto',
                    grid_template_columns='25% 25% 25% 25%',
                    grid_template_areas='''
                    "header header header header"
                    "firstmain firstmain sidebar sidebar"
                    "secondmain secondmain secondmain secondmain"
                    "footer footer footer footer"
                    ''')
    )


    return gridbox
