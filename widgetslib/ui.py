import ipywidgets as widgets
from ipywidgets import Layout, GridBox
import time
import os
from datetime import datetime
import markdown
import glob
from ipyiframe import Iframe
from widgetslib import data
from ipywidgets import interact
from IPython.core import display

md = markdown.Markdown()

debug_output = widgets.Output(layout=Layout(width='auto', grid_area='footer', border='solid 2px'))
debug_output.append_stdout("ERROR AREA")


'''
import ipywidgets as widgets
from IPython.display import HTML

def hover(hover_color="#ffff99"):
    return dict(selector="tr:hover",
                props=[("background-color", "%s" % hover_color)])

styles = [
    hover(),
    dict(selector="th", props=[("font-size", "80%"),
                               ("text-align", "center")]),
    dict(selector="caption", props=[("caption-side", "bottom")])
]
html = (dirtraversal_df.style.set_table_styles(styles)
          .set_caption("Hover to highlight."))

widgets.HTML(value=html.render())
'''
    
class WebIntGUI():
    @debug_output.capture(clear_output=True)
    def __init__(self):
        self.do = debug_output
        self.dbapi = data.DataAPI("eurid.eu")
        
        
    @debug_output.capture(clear_output=True)
    def run(self):
  
        return self.create_ui()
    
    @debug_output.capture(clear_output=True)
    def output(self, outputtext,outputobj=""):
        if isinstance(outputobj, widgets.widgets.widget_output.Output):
            outputobj.append_stdout(outputtext+"\n")
        else:
            print(outputtext+"\n")


    @debug_output.capture(clear_output=True)
    def create_update_accordion(self, results=""):

        if not results:
            results = {"Overview":"",
                       "Portscan":"",
                       "Dirtraversal":"",
                       "Webserver": "",
                       "Additional Notes": ""}

        accordion_children = []
        accordion_titles = []

        for title, value in results.items():

            accordion_children.append(widgets.HTML(value=md.convert(value),layout=Layout(overflow_y='auto',height='400px',)))
            accordion_titles.append(title)

        self.accordion = widgets.Accordion(children=accordion_children,layout=Layout(width='auto', grid_area='sidebar'))
        [self.accordion.set_title(index, single_title) for index, single_title in enumerate(accordion_titles)] 

        #return self.accordion


    @debug_output.capture(clear_output=True)
    def host_trigger(self):


        sel_values = self.host_text01.value
        output("Portscan: {}\n".format(",".join(sel_values)),self.control_out)


    @debug_output.capture(clear_output=True)
    def create_control_tab(self, children, titles):

        tab_titles = titles
        tab = widgets.Tab(layout=Layout(width='auto', grid_area='tab'))
        tab.children = children
        for index,title in enumerate(tab_titles):
            tab.set_title(index,title)

        return tab


    @debug_output.capture(clear_output=True)
    def create_visuals_tab(self, children, titles):

        tab_titles = titles
        tab = widgets.Tab(layout=Layout(width='auto', grid_area='secondmain'))
        tab.children = children
        for index,title in enumerate(tab_titles):
            tab.set_title(index,title)

        return tab

    def get_ip_list(self):
        return [1,2,3]

    def get_domain_list(self):
        return ['a','b','c']


    def erroroutput(self):
        return self.do

    def get_graph_file(self):
        graph_files = glob.glob("figure/graph*")
        with open(graph_files[0],"r") as f:
            html = f.read()
        return html

    @debug_output.capture(clear_output=True)
    def create_visual_children(self):

        self.bokehchild = widgets.Output()
        self.neo4jchild = widgets.Output()
        children = []
        children.append(self.bokehchild)
        children.append(self.neo4jchild)

        return children

    @debug_output.capture(clear_output=True)
    def create_iframe_widget(self, filename):
        f = Iframe(
        # url - default to None
        # content - default to None
        # exactly one of src and srcdoc can be passed
        src="http://192.168.178.105:8888/myjupyt3r/files/work/PandasPentesterTutorial/figure/graph-4e2fc29d-064c-4887-b0f9-68ddb654b4d7.html",
        # width in CSS px - from the content page
        width=1800,
        # height in CSS px - from the content page
        height=1000,
        border='0',
            # CSS for iframe border attr
        # CSS for iframe margin attr
        #margin='',
        # CSS for iframe padding attr
        padding='1px',
        # iframe scrolling attr
        scrolling='no',
        # scaling factor - default to 1.0
        scale=0.6,
        # transform-origin param - default to 'top left'
        transform_origin='top left')

        return f

   
    @debug_output.capture(clear_output=True)
    def create_ui(self):
        
        self.scope_drop = widgets.Dropdown (
                      options = self.list_scopes(),
                      value="eurid.eu",
                      description="Scope",
                      disabled=False,
                      layout=Layout(width='95%', height='50px', grid_area='header'))
                           
        self.scope_drop.observe(self.on_dropdown_change_scope)
        


        self.host_text01 = widgets.Text(value='',
                      placeholder='1.2.3.4',
                      description='IP-Adresse',
                      disabled=False)

        self.host_drop01 = widgets.Dropdown(
                      options=[el for el in self.dbapi.return_ip_list()],
                      
                      description='IP-Adresse',
                      disabled=False)
        
        self.host_drop01.observe(self.on_dropdown_change_ip)


        self.host_text02 = widgets.Text(value='',
                      placeholder='victim.enterprise.com',
                      description='Domain',
                      disabled=False)
        self.host_drop02 = widgets.Dropdown(
                      options=[el for el in self.dbapi.return_domain_list()],
                      
                      description='Domain',
                      disabled=False)  

        self.host_drop02.observe(self.on_dropdown_change_domain)
        
        self.host_button = widgets.Button(value=False,
                                       description='Find Portscan',
                                       disabled=False,
                                       button_style='success',
                                       tooltip='Description',
                                       icon='check')

        self.control_out = widgets.HTML(layout=Layout(height='400px', grid_area='out'))

        self.stat_out=widgets.HTML(layout={'border':'1px solid black'})


        self.control_children = []
        
        #self.control_children.append(widgets.VBox([widgets.HBox([self.host_text01, self.host_drop01]), 
        #                             widgets.HBox([self.host_text02, self.host_drop02]), 
        #                             widgets.HBox([self.host_button, self.control_out])]))
        
        
        
        self.control_children.append(widgets.VBox([self.host_drop01, self.host_drop02]))
                                     
        self.control_children.append(widgets.VBox([self.stat_out]))

        tab_titles = ["Find Host", "Settings"]

        self.control_tab = self.create_control_tab(self.control_children, tab_titles)
        self.control_gridbox = self.create_control_gridbox([self.control_tab, self.control_out])


        tab_titles = ["Location", "Network View"]

        self.visual_children = self.create_visual_children()

        self.visuals_tab = self.create_visuals_tab(self.visual_children, tab_titles)
        self.create_update_accordion()


        self.host_button.on_click(self.host_trigger)

        return self.create_main_gridbox([self.scope_drop, self.control_gridbox, self.do, self.accordion, self.visuals_tab])

    @debug_output.capture(clear_output=True)
    def create_main_gridbox(self, children=""):

        if not children:
            children = [self.scope_drop, self.control_gridbox, self.do, self.accordion, self.visuals_tab]
            
        self.gridbox = GridBox(children=children,
                layout=Layout(
                        width='100%',
                        grid_template_rows='auto auto auto',
                        grid_template_columns='25% 25% 25% 25%',
                        grid_template_areas='''
                        "header header header header"
                        "firstmain sidebar sidebar sidebar"
                        "secondmain secondmain secondmain secondmain"
                        "footer footer footer footer"
                        ''')
        )


        return self.gridbox
    
    
    def create_control_gridbox(self, children=""):

        if not children:
            children = [self.control_tab, self.control_out]
            
        self.control_gridbox = GridBox(children=children,
                layout=Layout(
                        width='100%',
                        grid_template_rows='auto',
                        grid_template_columns='100%',
                        grid_area="firstmain",
                        grid_template_areas='''
                        "tab"
                        "out"
                        ''')
        )


        return self.control_gridbox
    
    
    @debug_output.capture(clear_output=True)
    def update_gridbox(self):
        
        self.gridbox.children = [self.scope_drop, self.control_gridbox, self.do,self.accordion, self.visuals_tab]
    
    @debug_output.capture(clear_output=True)
    def on_dropdown_change_ip(self, change):
        if change['name'] == 'value' and (change['new'] != change['old']):
            self.update_gui(change['new'], typ="ip")
            
    @debug_output.capture(clear_output=True)
    def on_dropdown_change_domain(self, change):
        if change['name'] == 'value' and (change['new'] != change['old']):
            self.update_gui(change['new'], typ="domain")
            
    @debug_output.capture(clear_output=True)
    def on_dropdown_change_scope(self, change):
        if change['name'] == 'value' and (change['new'] != change['old']):
            self.dbapi = data.DataAPI(change['new'])
            #self.update_gui(change['new'], typ="domain")
            
    @debug_output.capture(clear_output=True)
    def update_gui(self, host, typ):
        host_ip = ""
        host_domain = ""
        
        if typ=="ip":
            host_ip = host
            host_domain = self.dbapi.ip_to_domain(host)
        elif typ == "domain":
            host_ip = self.dbapi.domain_to_ip(host)[0]
            host_domain = host
        
        portscan = self.get_portscan(host_ip)
        dirtraversal = self.get_dirtraversal(host_domain)
        
        
        result = {"Overview":"summary from the other results",
                  "Portscan":portscan,
                  "Dirtraversal":dirtraversal,
                  "Webserver":"",
                  "Additional Notes":"should be editable textarea"}
        
        
        self.create_update_accordion(result)
        self.update_gridbox()
        
    @debug_output.capture(clear_output=True)    
    def get_portscan(self, ip):
        
        portscan = self.dbapi.return_portscan(ip)
        if not portscan.empty:
            self.control_out.value += md.convert("  * Got Portscan for __{}__".format(ip))
            return portscan.to_html()
        else:
            return ""
    
    @debug_output.capture(clear_output=True)    
    def get_dirtraversal(self, domain):
        
        if isinstance(domain, str):
            domain = [domain]
        
        dirtraversal = self.dbapi.return_dirtraversal(domain)
        if dirtraversal:
            self.control_out.value += md.convert("  * Got Directory traversal for __{}__".format("\n\t, ".join([x for x in domain])))
            html_result = ""
            for title, value in dirtraversal.items():
                html_result += "<h3>"+title+"</h3>"
                html_result += value.to_html()
                
            return html_result
                
    def list_scopes(self):
        
        scopes = [el.rstrip(".db").lstrip("data/") for el in glob.glob("data/*.db")]
        return scopes
        